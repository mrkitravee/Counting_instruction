!int main() {
0x9D001BD4: ADDIU SP, SP, -440
0x9D001BD8: SW RA, 436(SP)
0x9D001BDC: SW S8, 432(SP)
0x9D001BE0: ADDU S8, SP, ZERO
!    int array[100], n, c, d, swap;
!    printf("Enter number of elements\n");
0x9D001BE4: LUI V0, -25344
0x9D001BE8: ADDIU A0, V0, 11516
0x9D001BEC: JAL puts
0x9D001BF0: NOP
!    scanf("%d", &n);
0x9D001BF4: ADDIU V0, S8, 428
0x9D001BF8: LUI V1, -25344
0x9D001BFC: ADDIU A0, V1, 11544
0x9D001C00: ADDU A1, V0, ZERO
0x9D001C04: JAL _scanf_cdnopuxX
0x9D001C08: NOP
!    printf("Enter %d integers\n", n);
0x9D001C0C: LW V0, 428(S8)
0x9D001C10: LUI V1, -25344
0x9D001C14: ADDIU A0, V1, 11548
0x9D001C18: ADDU A1, V0, ZERO
0x9D001C1C: JAL _printf_cdnopuxX
0x9D001C20: NOP
!    for (c = 0; c < n; c++)
0x9D001C24: SW ZERO, 16(S8)
0x9D001C28: J 0x9D001C60
0x9D001C2C: NOP
0x9D001C54: LW V0, 16(S8)
0x9D001C58: ADDIU V0, V0, 1
0x9D001C5C: SW V0, 16(S8)
0x9D001C60: LW V0, 428(S8)
0x9D001C64: LW V1, 16(S8)
0x9D001C68: SLT V0, V1, V0
0x9D001C6C: BNE V0, ZERO, 0x9D001C30
0x9D001C70: NOP
!        scanf("%d", &array[c]);
0x9D001C30: LW V0, 16(S8)
0x9D001C34: SLL V0, V0, 2
0x9D001C38: ADDIU V1, S8, 28
0x9D001C3C: ADDU V0, V1, V0
0x9D001C40: LUI V1, -25344
0x9D001C44: ADDIU A0, V1, 11544
0x9D001C48: ADDU A1, V0, ZERO
0x9D001C4C: JAL _scanf_cdnopuxX
0x9D001C50: NOP
!    for (c = 0; c < (n - 1); c++) {
0x9D001C74: SW ZERO, 16(S8)
0x9D001C78: J 0x9D001D5C
0x9D001C7C: NOP
0x9D001D50: LW V0, 16(S8)
0x9D001D54: ADDIU V0, V0, 1
0x9D001D58: SW V0, 16(S8)
0x9D001D5C: LW V0, 428(S8)
0x9D001D60: ADDIU V1, V0, -1
0x9D001D64: LW V0, 16(S8)
0x9D001D68: SLT V0, V0, V1
0x9D001D6C: BNE V0, ZERO, 0x9D001C80
0x9D001D70: NOP
!        for (d = 0; d < n - c - 1; d++) {
0x9D001C80: SW ZERO, 20(S8)
0x9D001C84: J 0x9D001D30
0x9D001C88: NOP
0x9D001D24: LW V0, 20(S8)
0x9D001D28: ADDIU V0, V0, 1
0x9D001D2C: SW V0, 20(S8)
0x9D001D30: LW V1, 428(S8)
0x9D001D34: LW V0, 16(S8)
0x9D001D38: SUBU V0, V1, V0
0x9D001D3C: ADDIU V1, V0, -1
0x9D001D40: LW V0, 20(S8)
0x9D001D44: SLT V0, V0, V1
0x9D001D48: BNE V0, ZERO, 0x9D001C8C
0x9D001D4C: NOP
!            /* For decreasing order use < */
!            if (array[d] > array[d + 1])  {
0x9D001C8C: LW V0, 20(S8)
0x9D001C90: SLL V0, V0, 2
0x9D001C94: ADDIU V1, S8, 16
0x9D001C98: ADDU V0, V1, V0
0x9D001C9C: LW V1, 12(V0)
0x9D001CA0: LW V0, 20(S8)
0x9D001CA4: ADDIU V0, V0, 1
0x9D001CA8: SLL V0, V0, 2
0x9D001CAC: ADDIU A0, S8, 16
0x9D001CB0: ADDU V0, A0, V0
0x9D001CB4: LW V0, 12(V0)
0x9D001CB8: SLT V0, V0, V1
0x9D001CBC: BEQ V0, ZERO, 0x9D001D24
0x9D001CC0: NOP
!                swap = array[d];
0x9D001CC4: LW V0, 20(S8)
0x9D001CC8: SLL V0, V0, 2
0x9D001CCC: ADDIU V1, S8, 16
0x9D001CD0: ADDU V0, V1, V0
0x9D001CD4: LW V0, 12(V0)
0x9D001CD8: SW V0, 24(S8)
!                array[d] = array[d + 1];
0x9D001CDC: LW V0, 20(S8)
0x9D001CE0: ADDIU V0, V0, 1
0x9D001CE4: SLL V0, V0, 2
0x9D001CE8: ADDIU V1, S8, 16
0x9D001CEC: ADDU V0, V1, V0
0x9D001CF0: LW V1, 12(V0)
0x9D001CF4: LW V0, 20(S8)
0x9D001CF8: SLL V0, V0, 2
0x9D001CFC: ADDIU A0, S8, 16
0x9D001D00: ADDU V0, A0, V0
0x9D001D04: SW V1, 12(V0)
!                array[d + 1] = swap;
0x9D001D08: LW V0, 20(S8)
0x9D001D0C: ADDIU V0, V0, 1
0x9D001D10: SLL V0, V0, 2
0x9D001D14: ADDIU V1, S8, 16
0x9D001D18: ADDU V0, V1, V0
0x9D001D1C: LW V1, 24(S8)
0x9D001D20: SW V1, 12(V0)
!            }
!        }
!    }
!    printf("Sorted list in ascending order:\n");
0x9D001D74: LUI V0, -25344
0x9D001D78: ADDIU A0, V0, 11568
0x9D001D7C: JAL puts
0x9D001D80: NOP
!    for (c = 0; c < n; c++)
0x9D001D84: SW ZERO, 16(S8)
0x9D001D88: J 0x9D001DC4
0x9D001D8C: NOP
0x9D001DB8: LW V0, 16(S8)
0x9D001DBC: ADDIU V0, V0, 1
0x9D001DC0: SW V0, 16(S8)
0x9D001DC4: LW V0, 428(S8)
0x9D001DC8: LW V1, 16(S8)
0x9D001DCC: SLT V0, V1, V0
0x9D001DD0: BNE V0, ZERO, 0x9D001D90
0x9D001DD4: NOP
!        printf("%d\n", array[c]);
0x9D001D90: LW V0, 16(S8)
0x9D001D94: SLL V0, V0, 2
0x9D001D98: ADDIU V1, S8, 16
0x9D001D9C: ADDU V0, V1, V0
0x9D001DA0: LW V0, 12(V0)
0x9D001DA4: LUI V1, -25344
0x9D001DA8: ADDIU A0, V1, 11600
0x9D001DAC: ADDU A1, V0, ZERO
0x9D001DB0: JAL _printf_cdnopuxX
0x9D001DB4: NOP
!    return 0;
0x9D001DD8: ADDU V0, ZERO, ZERO
!}
0x9D001DDC: ADDU SP, S8, ZERO
0x9D001DE0: LW RA, 436(SP)
0x9D001DE4: LW S8, 432(SP)
0x9D001DE8: ADDIU SP, SP, 440
0x9D001DEC: JR RA
0x9D001DF0: NOP